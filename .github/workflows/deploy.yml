name: Build & Deploy

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_BACKEND: ghcr.io/vainarito/task-manager-backend
  IMAGE_FRONTEND: ghcr.io/vainarito/task-manager-frontend
  CHART_DIR: charts/task-manager
  RELEASE_NAME: task-manager
  K8S_NAMESPACE: default

jobs:
  build-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.IMAGE_BACKEND }}:latest
            ${{ env.IMAGE_BACKEND }}:sha-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.IMAGE_FRONTEND }}:latest
            ${{ env.IMAGE_FRONTEND }}:sha-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release-chart:
    runs-on: ubuntu-latest
    needs: build-push
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.4'

      - name: Lint Helm chart
        run: |
          helm lint ${{ env.CHART_DIR }}
          echo "Helm chart linting passed"

      - name: Package Helm chart
        run: |
          helm package ${{ env.CHART_DIR }} --destination ./charts/
          echo "Chart packaged successfully"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: github.ref == 'refs/heads/master'
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          files: ./charts/*.tgz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build-push, release-chart]
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.4'

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Verify cluster access
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Deploy with Helm
        run: |
          helm upgrade --install "${{ env.RELEASE_NAME }}" ${{ env.CHART_DIR }} \
            --namespace "${{ env.K8S_NAMESPACE }}" \
            --create-namespace \
            --set backend.image.repository=${{ env.IMAGE_BACKEND }} \
            --set backend.image.tag=sha-${{ github.sha }} \
            --set frontend.image.repository=${{ env.IMAGE_FRONTEND }} \
            --set frontend.image.tag=sha-${{ github.sha }} \
            --wait \
            --timeout=5m \
            --atomic

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/${{ env.RELEASE_NAME }}-backend --namespace "${{ env.K8S_NAMESPACE }}" --timeout=300s
          kubectl rollout status deployment/${{ env.RELEASE_NAME }}-frontend --namespace "${{ env.K8S_NAMESPACE }}" --timeout=300s
          kubectl get pods -n "${{ env.K8S_NAMESPACE }}" -l "app.kubernetes.io/instance=${{ env.RELEASE_NAME }}"

      - name: Run smoke tests
        run: |
          echo "ðŸ§ª Running smoke tests..."
          kubectl get svc -n "${{ env.K8S_NAMESPACE }}"
          kubectl get ingress -n "${{ env.K8S_NAMESPACE }}" 2>/dev/null || echo "No ingress configured"